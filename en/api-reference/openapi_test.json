{
  "openapi": "3.0.1",
  "info": {
    "title": "Advanced Test API",
    "description": "A comprehensive test API for validating the OpenAPI translation system with complex nested structures, multiple endpoints, and detailed documentation.",
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "{api_base_url}",
      "description": "The primary base URL for the API server."
    },
    {
      "url": "https://staging-api.example.com/v1",
      "description": "Staging environment for testing new features before production deployment."
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "List All Users",
        "description": "Retrieves a paginated list of all users in the system with optional filtering capabilities.",
        "operationId": "listUsers",
        "tags": ["User Management"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (starts at 1).",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of users to return per page (maximum 100).",
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid query parameters."
          },
          "401": {
            "description": "Authentication required. Please provide a valid API key."
          },
          "500": {
            "description": "Internal server error occurred while processing the request."
          }
        }
      },
      "post": {
        "summary": "Create New User",
        "description": "Creates a new user account with the provided information and returns the created user details.",
        "operationId": "createUser",
        "tags": ["User Management"],
        "requestBody": {
          "description": "User data for creating a new account.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created and registered in the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user data provided in the request body."
          },
          "409": {
            "description": "User with this email address already exists in the system."
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get User Details",
        "description": "Retrieves detailed information about a specific user by their unique identifier.",
        "operationId": "getUserById",
        "tags": ["User Management"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the user to retrieve.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found and details returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found with the specified identifier."
          }
        }
      },
      "put": {
        "summary": "Update User Information",
        "description": "Updates an existing user's information with the provided data. Only specified fields will be updated.",
        "operationId": "updateUser",
        "tags": ["User Management"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the user to update.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user data. Only provide fields that need to be changed.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User information successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found with the specified identifier."
          }
        }
      },
      "delete": {
        "summary": "Delete User Account",
        "description": "Permanently deletes a user account and all associated data from the system.",
        "operationId": "deleteUser",
        "tags": ["User Management"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the user to delete.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted. No content returned."
          },
          "404": {
            "description": "User not found with the specified identifier."
          }
        }
      }
    },
    "/orders": {
      "post": {
        "summary": "Create New Order",
        "description": "Creates a new order for products with detailed shipping and payment information.",
        "operationId": "createOrder",
        "tags": ["Order Management"],
        "requestBody": {
          "description": "Order details including items, shipping address, and payment method.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order successfully created and is being processed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT-based authentication. Obtain a token via the /auth/login endpoint and include it in the Authorization header."
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "description": "Represents a user account in the system with complete profile information.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user account."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address used for login and communications."
          },
          "name": {
            "type": "string",
            "description": "Full name of the user."
          },
          "profile": {
            "type": "object",
            "description": "Extended user profile information and preferences.",
            "properties": {
              "avatar": {
                "type": "string",
                "format": "uri",
                "description": "URL to the user's profile picture or avatar image."
              },
              "bio": {
                "type": "string",
                "description": "Short biography or description provided by the user."
              },
              "preferences": {
                "type": "object",
                "description": "User's application preferences and settings.",
                "properties": {
                  "language": {
                    "type": "string",
                    "description": "Preferred language for the user interface (ISO 639-1 code)."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "User's timezone for displaying dates and times (IANA timezone identifier)."
                  },
                  "notifications": {
                    "type": "object",
                    "description": "Notification preferences for different communication channels.",
                    "properties": {
                      "email": {
                        "type": "boolean",
                        "description": "Whether to receive email notifications."
                      },
                      "push": {
                        "type": "boolean",
                        "description": "Whether to receive push notifications on mobile devices."
                      }
                    }
                  }
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user account was created."
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "description": "Request body for creating a new user account.",
        "required": ["email", "name"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for the new user account (must be unique)."
          },
          "name": {
            "type": "string",
            "description": "Full name of the new user."
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "description": "Request body for updating user information. All fields are optional.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated full name for the user."
          },
          "profile": {
            "type": "object",
            "description": "Updated profile information.",
            "properties": {
              "bio": {
                "type": "string",
                "description": "Updated user biography or description."
              }
            }
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "description": "Paginated response containing a list of users and pagination metadata.",
        "properties": {
          "users": {
            "type": "array",
            "description": "Array of user objects in the current page.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "pagination": {
            "type": "object",
            "description": "Pagination information for navigating through results.",
            "properties": {
              "page": {
                "type": "integer",
                "description": "Current page number."
              },
              "limit": {
                "type": "integer",
                "description": "Number of items per page."
              },
              "total": {
                "type": "integer",
                "description": "Total number of users available."
              }
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "description": "Represents a customer order with items, shipping, and payment details.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the order."
          },
          "items": {
            "type": "array",
            "description": "List of items included in the order.",
            "items": {
              "type": "object",
              "description": "Individual item in the order.",
              "properties": {
                "product_id": {
                  "type": "string",
                  "description": "Unique identifier of the ordered product."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Number of units ordered for this product."
                },
                "price": {
                  "type": "number",
                  "description": "Price per unit at the time of order."
                }
              }
            }
          },
          "shipping": {
            "type": "object",
            "description": "Shipping information for the order delivery.",
            "properties": {
              "address": {
                "type": "object",
                "description": "Delivery address details.",
                "properties": {
                  "street": {
                    "type": "string",
                    "description": "Street address for delivery."
                  },
                  "city": {
                    "type": "string",
                    "description": "City name for delivery."
                  },
                  "country": {
                    "type": "string",
                    "description": "Country code for delivery (ISO 3166-1 alpha-2)."
                  }
                }
              },
              "method": {
                "type": "string",
                "description": "Shipping method selected by the customer (e.g., standard, express)."
              }
            }
          },
          "status": {
            "type": "string",
            "description": "Current status of the order (pending, processing, shipped, delivered, cancelled)."
          }
        }
      },
      "CreateOrderRequest": {
        "type": "object",
        "description": "Request body for creating a new order with all necessary details.",
        "required": ["items", "shipping"],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of items to include in the order.",
            "items": {
              "type": "object",
              "description": "Item to be ordered.",
              "properties": {
                "product_id": {
                  "type": "string",
                  "description": "Unique identifier of the product to order."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Number of units to order."
                }
              }
            }
          },
          "shipping": {
            "type": "object",
            "description": "Shipping information for order delivery.",
            "properties": {
              "address": {
                "type": "object",
                "description": "Delivery address.",
                "properties": {
                  "street": {
                    "type": "string",
                    "description": "Street address."
                  },
                  "city": {
                    "type": "string",
                    "description": "City name."
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "User Management",
      "description": "Operations for managing user accounts, profiles, and authentication."
    },
    {
      "name": "Order Management",
      "description": "Operations for creating, tracking, and managing customer orders."
    }
  ]
}
